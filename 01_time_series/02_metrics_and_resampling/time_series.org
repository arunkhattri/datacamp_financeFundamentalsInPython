#+TITLE: Basic Time Series Metrics & Resampling

* Compare time series growth rates

import necessary python modules

#+begin_src python :session *py-session :results output :exports both
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf
import mplfinance as mpf
#+end_src

#+RESULTS:

getting stock data of ~INFY~, ~TATAMOTORS~ & ~RELIANCE~

#+begin_src python :session *py-session :results output :exports both
tickers = yf.Tickers("INFY.NS TATAMOTORS.NS RELIANCE.NS")
infy = tickers.tickers['INFY.NS'].history(period="5y", actions=False)
print(infy.info())
#+end_src

#+RESULTS:
#+begin_example
<class 'pandas.core.frame.DataFrame'>
DatetimeIndex: 1238 entries, 2018-04-02 00:00:00+05:30 to 2023-03-31 00:00:00+05:30
Data columns (total 5 columns):
 #   Column  Non-Null Count  Dtype
---  ------  --------------  -----
 0   Open    1238 non-null   float64
 1   High    1238 non-null   float64
 2   Low     1238 non-null   float64
 3   Close   1238 non-null   float64
 4   Volume  1238 non-null   int64
dtypes: float64(4), int64(1)
memory usage: 58.0 KB
None
#+end_example

** Normalize

Divide all prices by first in series, multiply by 100

#+begin_src python :session *py-session :results output file :exports both
infy_close = infy.iloc[:, [3]]
first_price_infy = infy_close.iloc[0]
normalized_infy_close = infy_close.div(first_price_infy).mul(100)
normalized_infy_close.plot(title="Infosys Normalized Series")
plt.savefig("img/infy_normalize.png")
print("img/infy_normalize.png")
#+end_src

#+RESULTS:
[[file:img/infy_normalize.png]]


*Normalizing multiple series*

#+begin_src python :session *py-session :results output :exports both
tm = tickers.tickers['TATAMOTORS.NS'].history(period='5y', actions=False)
reliance = tickers.tickers['RELIANCE.NS'].history(period='5y', actions=False)
df = pd.DataFrame()
df.index = infy.index
df['infy'] = infy.loc[:, 'Close']
df['tm'] = tm.loc[:, 'Close']
df['reliance'] = reliance.loc[:, 'Close']
print(df.info())
#+end_src

#+RESULTS:
#+begin_example
<class 'pandas.core.frame.DataFrame'>
DatetimeIndex: 1238 entries, 2018-04-02 00:00:00+05:30 to 2023-03-31 00:00:00+05:30
Data columns (total 3 columns):
 #   Column    Non-Null Count  Dtype
---  ------    --------------  -----
 0   infy      1238 non-null   float64
 1   tm        1238 non-null   float64
 2   reliance  1238 non-null   float64
dtypes: float64(3)
memory usage: 38.7 KB
None
#+end_example

sanity check, looking first five rows

#+begin_src python :session *py-session :results output :exports both
pd.set_option("display.precision", 2)
print(df.head())
#+end_src

#+RESULTS:
:                              infy      tm  reliance
: Date
: 2018-04-02 00:00:00+05:30  501.08  339.15    865.63
: 2018-04-03 00:00:00+05:30  502.54  343.10    872.03
: 2018-04-04 00:00:00+05:30  495.38  355.60    867.52
: 2018-04-05 00:00:00+05:30  505.66  362.20    880.42
: 2018-04-06 00:00:00+05:30  496.61  364.10    883.13

normalizing

#+begin_src python :session *py-session :results output :exports both
normalized_df = df.div(df.iloc[0]).mul(100)
print(normalized_df.head())
#+end_src

#+RESULTS:
:                              infy      tm  reliance
: Date
: 2018-04-02 00:00:00+05:30  100.00  100.00    100.00
: 2018-04-03 00:00:00+05:30  100.29  101.16    100.74
: 2018-04-04 00:00:00+05:30   98.86  104.85    100.22
: 2018-04-05 00:00:00+05:30  100.91  106.80    101.71
: 2018-04-06 00:00:00+05:30   99.11  107.36    102.02


*Compare with benchmark*

get the Nifty50 data

#+begin_src python :session *py-session :results output :exports both
nifty50 = yf.Ticker("^NSEI").history(period='5y', actions=False)
nifty50.info()
#+end_src

#+RESULTS:
#+begin_example
<class 'pandas.core.frame.DataFrame'>
DatetimeIndex: 1235 entries, 2018-04-02 00:00:00+05:30 to 2023-03-31 00:00:00+05:30
Data columns (total 5 columns):
 #   Column  Non-Null Count  Dtype
---  ------  --------------  -----
 0   Open    1235 non-null   float64
 1   High    1235 non-null   float64
 2   Low     1235 non-null   float64
 3   Close   1235 non-null   float64
 4   Volume  1235 non-null   int64
dtypes: float64(4), int64(1)
memory usage: 57.9 KB
#+end_example

concat nifty50 and df

#+begin_src python :session *py-session :results output :exports both
index = nifty50.iloc[:, [3]]
index = index.rename(columns={'Close': "index"})
df = pd.concat([df, index], axis=1).dropna()
df.info()
#+end_src

#+RESULTS:
#+begin_example
<class 'pandas.core.frame.DataFrame'>
DatetimeIndex: 1235 entries, 2018-04-02 00:00:00+05:30 to 2023-03-31 00:00:00+05:30
Data columns (total 4 columns):
 #   Column    Non-Null Count  Dtype
---  ------    --------------  -----
 0   infy      1235 non-null   float64
 1   tm        1235 non-null   float64
 2   reliance  1235 non-null   float64
 3   index     1235 non-null   float64
dtypes: float64(4)
memory usage: 48.2 KB
#+end_example

normalize

#+begin_src python :session *py-session :results output :exports both
normalized_df_index = df.div(df.iloc[0]).mul(100)
print(normalized_df_index.head(3))
#+end_src

#+RESULTS:
:                              infy      tm  reliance   index
: Date
: 2018-04-02 00:00:00+05:30  100.00  100.00    100.00  100.00
: 2018-04-03 00:00:00+05:30  100.29  101.16    100.74  100.33
: 2018-04-04 00:00:00+05:30   98.86  104.85    100.22   99.18


Plot

#+begin_src python :session *py-session :results output file :exports both
normalized_df_index.plot(title="Comparing with benchmark: Infosys, Tata Motors & Reliance")
plt.savefig("img/compare_with_benchmark.png")
print("img/compare_with_benchmark.png")
#+end_src

#+RESULTS:
[[file:img/compare_with_benchmark.png]]
